---
name: release

# This workflow requires a DOCKERHUB_PASSWORD secret to be defined in the GitHub
# repository settings.

on:
  push:
    branches: [main]
    paths:
      - "*/build/**"
      - .github/workflows/release.yml
  schedule:
    # Runs automatically on the 27th of every month at 04:30 UTC
    - cron: "30 04 27 * *"

env:
  DOCKERHUB_USERNAME: dmotte

jobs:
  release:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        item:
          - name: bind
            version-cmd: v$(docker run --rm tmp -v | head -1 | cut -d' ' -f2)
          - name: dnsmasq
            version-cmd: v$(docker run --rm tmp -v | head -1 | cut -d' ' -f3)
          - name: socat
            version-cmd: v$(docker run --rm tmp -V | head -2 | tail -1 | cut -d' ' -f3)
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Get tag list based on package version
        id: get-tags
        run: |
          docker build -t tmp ${{ matrix.item.name }}/build

          FULL_VERSION="${{ matrix.item.version-cmd }}"
          echo Full version: "$FULL_VERSION"

          # Check that what we have is actually a valid version number
          [[ "$FULL_VERSION" =~ ^v[0-9]+(\.[0-9]+)*$ ]]

          echo -n "::set-output name=tags::$DOCKERHUB_USERNAME/${{ matrix.item.name }}:latest"
          PIECES="$(echo "$FULL_VERSION" | tr "." "\n")"
          CONCAT=""
          for i in $PIECES; do
            CONCAT="$CONCAT$i."
            echo -n ",$DOCKERHUB_USERNAME/${{ matrix.item.name }}:${CONCAT%?}"
          done
          echo # End of line

      - name: Build and push
        id: docker-build
        uses: docker/build-push-action@v3
        with:
          context: ${{ matrix.item.name }}/build
          platforms: linux/386, linux/amd64, linux/arm/v6, linux/arm/v7, linux/arm64
          push: true
          tags: ${{ steps.get-tags.outputs.tags }}

      - name: Image digest
        run: echo ${{ steps.docker-build.outputs.digest }}
